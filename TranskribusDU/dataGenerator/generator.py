    # -*- coding: utf-8 -*-
"""


    Generator.py

    create (generate) annotated data 
     H. DÃ©jean
    

    copyright Xerox 2017
    READ project 

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    
    Developed  for the EU project READ. The READ project has received funding 
    from the European Union's Horizon 2020 research and innovation programme 
    under grant agreement No 674943.
"""
from __future__ import absolute_import
from __future__ import  print_function
from __future__ import unicode_literals

import random
import numpy as np

class Generator(object):
    ID=0
#     genID=0
    
    def __init__(self):
        
        # structure of the object: list of Generators with alterniatives (all possible structures)
        self._structure = None

        # instance: one selected structure among _structure
        self._instance  = None
        # concrete instance
        self._generation = None
        # 
        self._serialization = None
#         # for text only?
#         self._value = None        
#         self._lresources = None
#         self.isWeighted = False

        # contains GT version  (X,Y)
        self._GT= None
        
        self.ID  = Generator.ID
        Generator.ID+=1

        # nice label for ML (getName is too long)
        # default name
        self._label = self.getName()
    
        self._parent =None    
        # position in a list (Generated by listGen)
        self._number= None
        
        # weighted resources:
        self.totalW = None
        self._prob = None
        self._flatlr= None
        self._lweightedIndex = None
        self.isWeighted = False
        
    def __str__(self): return self.getName()
    def __repr__(self): return self.getName()
    
        
    def getLabel(self): return self._label
    def setLabel(self,l): self._label= l 
    
#     def getName(self): return "%s_%d"%(self.__class__.__name__ ,self.ID)
    def getName(self): return self.__class__.__name__
    
    def getParent(self):self._parent
    def setParent(self,p):self._parent = p
    # when generated by listGenerator
    def setNumber(self,n): self._number = n
    def getNumber(self): return self._number
    
    #   getGeneratedValue()
    def getRandomElt(self,mylist):
        if self.isWeighted:
            # for textOnly?? 
            return self.getWeightedRandomElt(mylist)
        else:
            ii =random.randint(0,len(mylist)-1)
            return mylist[ii]
        
    def getWeightedRandomElt(self,myList):
        """
            weight the drawing with element weight (frequency)
            
            too slows to draw each time a value:
                - > generate man values and pop when needed!
        """
        # need to generate again if pop empty
        try:
            ind= self._lweightedIndex.pop()
        except IndexError:
            self._lweightedIndex  = list(np.random.choice(self._flatlr,100000,p=self._prob))
            ind= self._lweightedIndex.pop()
        return ind
    
        ret = np.random.choice(self._flatlr,1,p=self._prob)[0]  
        if type(ret) ==  np.unicode_:
            ret = ret
        return ret     

    def reportMe(self):
        """
            return the instanciated form
        """
        return self._instance
        
    def serialize(self):
        """
            create the final format
                string for textGen
                DSXML for DSdocument,...
            
        """
        raise Exception('must be instantiated')
    
    def exportAnnotatedData(self,foo=[]):
        """
            generate annotated data for self
            build a full version of self._generation: integration of the subparts (subobjects)

        """
        raise Exception( 'must be instantiated')
    
    
    def instantiate(self):
        """
            select using proba stuff the final realisation in terms of structure: no generation
        """
        if self._structure is None:
            self._instance = (self,)
        else:
            self._instance  = []
            structproba = self.getRandomElt(self._structure)
            struct, proba = structproba[:-1], structproba[-1]
            # terminal textual stuff is not tuple but unicode: the generateProb need to be more efficient
            if type(struct) in [ tuple,list] :
                for obj, _,proba in struct:
                    if obj is not None:
                        obj.setParent(self)
                        generateProb = 1.0 * random.uniform(1,100)
                        if generateProb < proba:
                            self._instance.append(obj.instantiate())
        assert  self._instance != [], (self,struct,proba)
        return self        
        
    
    def generate(self):
        """
            return object : value, annotation
        """
        self._generation  = []
        for obj in self._instance:
            obj.generate()
            self._generation.append(obj)
        return self    
    
    
    def noiseErase(self):
        """
            element is not generated
        """
        raise Exception('must be instantiated')
    
    def noiseMerge(self):
        """
            if self has several _structural/generated elements
            test if there is a merge operation (draw)
                weight: add as parameter of self (in _structural)
            if merge: select two consecutive elements and merge them: 
            annotation: add L1_L2 as label?
            
            How to select elements?: (merge of lines from several columns)
                what is 'physically' near may not be near form a structural view point
        """
        raise Exception('must be instantiated')
    
    def noiseSplit(self):
        """
            test if there is a split  operation (draw)  on self
            if split: select two consecutive elements and merge them: 
            annotation: add Split1, SplitN in label?
        """
        raise Exception('must be instantiated')
    
if __name__ == "__main__":

    g= Generator()
    print(g)
